{"version":3,"sources":["Components/BeatLoopPlayer.js","styles/bpmInputButton.styles.js","styles/card.styles.js","Components/BpmInput.js","Components/PolyrythmInput.js","Components/SubdivisionInput.js","Components/TimeSignatureInput.js","Components/Metronome.js","Components/MidiPlayback.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["BeatLoopPlayer","props","state","loop","beatsPerMeasure","subdivisionsPerBeat","beatAccentuation","tempoStyle","beatUnitsPerMinute","beatUnit","this","createBeatLoop","setState","midiPlayback","current","startPlayLoop","firstBeat","weakBeat","strongBeat","muteBeat","beatLoop","tick","get","stopPlayLoop","Component","noCapslockButtonText","textTransform","gridInCard","margin","captionInCard","BpmInput","value","number","parseInt","currentBpm","updateMetronomeBpm","updateBpm","Math","floor","parseFloat","isNaN","startAdornment","InputAdornment","position","endAdornment","event","style","target","changeTempoStyle","inputEvent","isPositiveRealNumber","Card","variant","Typography","Grid","container","spacing","alignItems","justify","direction","item","RadioGroup","aria-label","label","name","onChange","bind","FormControlLabel","control","Radio","TextField","InputProps","createAdornment","id","handleInput","placeholder","autoFocus","Button","onClick","addBpm","multiplyBpmBy","PolyrythmInput","counterRythm","basicPulse","changeEvent","maxIndex","options","index","push","key","playPolyrythm","FormControl","InputLabel","htmlFor","NativeSelect","updateCounterRythm","createOptions","updateBasicPulse","SubdivisionInput","changeSubdivision","size","buttons","accentString","repeat","length","ButtonGroup","createButtonGroups","numberOfSubdivisions","TimeSignatureInput","trim","updateTimeSignature","updateBeatsPerMeasure","updateBeatUnit","Metronome","defaultBpm","defaultSubdivisionsPerBeat","defaultBeatUnit","defaultBeatsPerMeasure","isPlaying","defaultBeatAccentuation","playLoop","beatPlayer","updateTempo","updateBeatLoop","stopPlaying","accents","createPolyrythmAccents","Map","set","currentAccent","updatedAccents","updatePlayingLoop","padding","column","stopLoop","changeAccentuation","MidiPlayback","beatsPerMinute","density","midiSounds","setEchoLevel","setMasterVolume","ref","appElementName","drums","Navbar","AppBar","color","Toolbar","App","React","createRef","className","Link","href","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a5d5ff9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass BeatLoopPlayer extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loop: null\n        }\n    }\n\n    updateBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation, tempoStyle, beatUnitsPerMinute, beatUnit) {\n        var loop = this.createBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation)\n        this.setState({loop: loop})\n        if (tempoStyle === \"Quarter\") {\n            this.props.midiPlayback.current.startPlayLoop(loop, beatUnitsPerMinute, 1 / (beatUnit * subdivisionsPerBeat));\n        }\n        else {\n            this.props.midiPlayback.current.startPlayLoop(loop, beatUnitsPerMinute, 1 / (4 * subdivisionsPerBeat));\n        }\n    }\n\n    updateTempo(beatUnitsPerMinute, tempoStyle, beatUnit, subdivisionsPerBeat) {\n        if (tempoStyle === \"Quarter\") {\n            this.props.midiPlayback.current.startPlayLoop(this.state.loop, beatUnitsPerMinute, 1 / (beatUnit * subdivisionsPerBeat));\n        }\n        else {\n            this.props.midiPlayback.current.startPlayLoop(this.state.loop, beatUnitsPerMinute, 1 / (4 * subdivisionsPerBeat));\n        }\n    }\n\n    createBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation) {\n        if (!beatsPerMeasure) {\n            return [[[], []]]\n        }\n\n        const firstBeat = [[200], []];\n        const weakBeat = [[210], []];\n        const strongBeat = [[205], []];\n        const muteBeat = [[], []]\n        var beatLoop = [];\n\n        for (let tick = 0; tick < (beatsPerMeasure * subdivisionsPerBeat); tick++) {\n            let accent = beatAccentuation.get(tick)\n            switch (accent) {\n                case 1: beatLoop[tick] = weakBeat;\n                    break;\n                case 2: beatLoop[tick] = strongBeat;\n                    break;\n                case 3: beatLoop[tick] = firstBeat;\n                    break;\n                case 0: beatLoop[tick] = muteBeat;\n                    break;\n                default: beatLoop[tick] = muteBeat;\n            }\n        }\n        return beatLoop;\n    }\n\n    stopPlaying() {\n        this.props.midiPlayback.current.stopPlayLoop()\n    }\n\n    render() {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default BeatLoopPlayer","const noCapslockButtonText = ({\n    textTransform: 'none'\n});\n\nexport default noCapslockButtonText\n\n","const gridInCard = ({\n    margin: 10\n});\n\nconst captionInCard = ({\n    margin: 10\n});\n\nexport {gridInCard, captionInCard}","import { Button, Grid, InputAdornment, TextField, Card, Typography, RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\nimport React, { Component } from 'react';\nimport noCapslockButtonText from '../styles/bpmInputButton.styles'\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\n\nclass BpmInput extends Component {\n    addBpm(value) {\n        const number = parseInt(this.props.currentBpm, 10) + parseInt(value, 10)\n        if (number < 0) {\n            return\n        }\n        else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    updateMetronomeBpm(number) {\n        this.props.updateBpm(number)\n    }\n\n    multiplyBpmBy(value) {\n        const number = Math.floor(parseInt(this.props.currentBpm, 10) * parseFloat(value, 10))\n        if (number < 0) {\n            return\n        } else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    isPositiveRealNumber(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    createAdornment() {\n        if (this.props.tempoStyle === \"Quarter\") {\n            return {\n                startAdornment: <InputAdornment position=\"start\">♩ = </InputAdornment>,\n            }\n        }\n        else {\n            return {\n                endAdornment: <InputAdornment position=\"end\">BPM </InputAdornment>,\n            }\n        }\n    }\n\n    changeTempoStyle(event) {\n        let style = event.target.value\n        if (style === \"Quarter\" || style === \"BPM\")\n            this.props.changeTempoStyle(style)\n    }\n\n    handleInput(inputEvent) {\n        const number = inputEvent.target.value\n        if (this.isPositiveRealNumber(number)) {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography variant=\"caption\" style={captionInCard}>Tempo</Typography>\n                <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item style={gridInCard}>\n                        <RadioGroup aria-label=\"Tempostyle\" label=\"Tempostyle\" name=\"Tempostyle\" value={this.props.tempoStyle} onChange={this.changeTempoStyle.bind(this)}>\n                            <FormControlLabel value=\"Quarter\" control={<Radio />} label=\"Quarter Notes per Minute\" />\n                            <FormControlLabel value=\"BPM\" control={<Radio />} label=\"Beats per Minute\" />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <TextField\n                            InputProps={this.createAdornment()}\n                            id=\"username\"\n                            onChange={this.handleInput.bind(this)}\n                            value={this.props.currentBpm}\n                            placeholder=\"0\"\n                            margin=\"normal\"\n                            label=\"Enter Tempo\"\n                            variant=\"standard\"\n                            autoFocus={true} />\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Grid container alignItems=\"center\" justify=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"+10\" onClick={this.addBpm.bind(this, '+10')} variant=\"contained\">+10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x1.5\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '1.5')} variant=\"contained\">x1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x2\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '2')} variant=\"contained\" >x2.0</Button>\n                            </Grid>\n                        </Grid>\n                        <Grid container justify=\"center\" alignItems=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"-10\" onClick={this.addBpm.bind(this, '-10')} variant=\"contained\">-10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"÷1.5\" onClick={this.multiplyBpmBy.bind(this, '0.75')} variant=\"contained\">÷1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"÷2\" onClick={this.multiplyBpmBy.bind(this, '0.5')} variant=\"contained\">÷2</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}\nexport default BpmInput","import { Button, Card, FormControl, Grid, InputLabel, NativeSelect, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport { captionInCard, gridInCard } from '../styles/card.styles';\n\nclass PolyrythmInput extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            counterRythm: 1,\n            basicPulse: 1\n        }\n    }\n\n    async updateCounterRythm(changeEvent) {\n        if (isNaN(changeEvent.target.value) || parseInt(changeEvent) <= 0) {\n            return\n        }\n        else {\n            await this.setState({ counterRythm: changeEvent.target.value })\n        }\n    }\n    async updateBasicPulse(changeEvent) {\n        if (isNaN(changeEvent.target.value) || parseInt(changeEvent) <= 0) {\n            return\n        }\n        else {\n            await this.setState({ basicPulse: changeEvent.target.value })\n        }\n    }\n\n    createOptions(maxIndex) {\n        var options = []\n        for (let index = 1; index < maxIndex + 1; index++) {\n            options.push(<option key={index} value={index}>{index}</option>);\n\n        }\n        return (options)\n    }\n\n\n    playPolyrythm() {\n        this.props.playPolyrythm(this.state.counterRythm, this.state.basicPulse)\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography style={captionInCard} variant=\"caption\">Polyrythm</Typography>\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item style={gridInCard}>\n                        <FormControl>\n                            <InputLabel htmlFor=\"Counterrythm-Input\">\n                                Counterrythm\n                            </InputLabel>\n                            <NativeSelect id=\"Counterrythm-Input\" onChange={(event) => this.updateCounterRythm(event)}>\n                                {this.createOptions(100)}\n                            </NativeSelect>\n                        </FormControl>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Typography> against </Typography>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <FormControl>\n                            <InputLabel htmlFor=\"Basic-Pulse-Input\">\n                                Basic&nbsp;Pulse\n                            </InputLabel>\n                            <NativeSelect id=\"Basic-Pulse-Input\" onChange={(event) => this.updateBasicPulse(event)}>\n                                {this.createOptions(100)}\n                            </NativeSelect>\n                        </FormControl>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Button variant=\"contained\" aria-label=\"Play-Polyrythm\" onClick={() => this.playPolyrythm()}>Play Polyrythm</Button>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}\n\nexport default PolyrythmInput","import { Button, ButtonGroup, Card, Grid, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\n\nclass SubdivisionInput extends Component {\n\n    handleClick(index) {\n        this.props.changeSubdivision(index)\n    }\n\n    createButtonGroups(size) {\n        let buttons = []\n\n        for (let index = 1; index <= size; index++) {\n            let accentString = \"█\".repeat(this.props.beatAccentuation.get(index - 1))\n            if (accentString.length === 0) {\n                accentString = \"mute\"\n            }\n            buttons.push(\n                <Grid key={index} item>\n                    <Grid container alignItems=\"center\" direction=\"column\">\n                        <Grid item>\n                            <Typography>{accentString}</Typography>\n                        </Grid>\n                        <Grid item>\n                            <ButtonGroup\n                                key={\"upTo\" + index}\n                                size=\"small\"\n                            >\n                                <Button\n                                    size=\"small\"\n                                    onClick={this.props.changeSubdivision.bind(this, index)}\n                                    variant=\"outlined\"\n                                    value={index}\n                                    aria-label={\"Subdivision \" + index}\n                                >\n                                    {index}\n                                </Button>\n                            </ButtonGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )\n\n        }\n        return (<Grid container style={gridInCard} direction=\"row\">{buttons}</Grid>)\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography variant=\"caption\" style={captionInCard}>Beat Accents</Typography>\n                {this.createButtonGroups(this.props.numberOfSubdivisions)}\n            </Card>\n        )\n    }\n}\n\nexport default SubdivisionInput","import { Grid, TextField, Card, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { captionInCard, gridInCard } from '../styles/card.styles'\n\nclass TimeSignatureInput extends Component {\n    isPositiveRealNumber(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    updateBeatsPerMeasure(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveRealNumber(number)) {\n            this.props.updateTimeSignature(number, this.props.beatUnit)\n        }\n    }\n    updateBeatUnit(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveRealNumber(number)) {\n            this.props.updateTimeSignature(this.props.beatsPerMeasure, number)\n        }\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography style={captionInCard} variant=\"caption\">Time Signature</Typography>\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item style={gridInCard}>\n                        <TextField variant=\"standard\" id=\"BeatsPerMeasureInput\" value={this.props.beatsPerMeasure} onChange={this.updateBeatsPerMeasure.bind(this)} label=\"Beats per Measure\"></TextField>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <TextField variant=\"standard\" id=\"BeatUnitInput\" value={this.props.beatUnit} onChange={this.updateBeatUnit.bind(this)} label=\"Beat Unit\"></TextField>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    };\n}\n\nexport default TimeSignatureInput","import { Button, Grid } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport BpmInput from \"./BpmInput\";\nimport PolyrythmInput from './PolyrythmInput';\nimport SubdivisionInput from \"./SubdivisionInput\";\nimport TimeSignatureInput from \"./TimeSignatureInput\";\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            beatUnitsPerMinute: this.props.defaultBpm,\n            subdivisionsPerBeat: this.props.defaultSubdivisionsPerBeat,\n            beatUnit: this.props.defaultBeatUnit,\n            beatsPerMeasure: this.props.defaultBeatsPerMeasure,\n            isPlaying: false,\n            beatAccentuation: this.props.defaultBeatAccentuation,\n            tempoStyle: this.props.tempoStyle\n        }\n    }\n\n    updatePlayingLoop() {\n        if (this.state.isPlaying === true) {\n            this.playLoop()\n        }\n    }\n    updateTempo() {\n        if (this.state.isPlaying === true) {\n            this.props.beatPlayer.current.updateTempo(\n                this.state.beatUnitsPerMinute,\n                this.state.tempoStyle,\n                this.state.beatUnit,\n                this.state.subdivisionsPerBeat\n            )\n        }\n    }\n\n    playLoop() {\n        this.setState({ isPlaying: true })\n        this.props.beatPlayer.current.updateBeatLoop(\n            this.state.beatsPerMeasure,\n            this.state.subdivisionsPerBeat,\n            this.state.beatAccentuation,\n            this.state.tempoStyle,\n            this.state.beatUnitsPerMinute,\n            this.state.beatUnit\n        )\n    }\n    stopLoop() {\n        this.setState({ isPlaying: false })\n        this.props.beatPlayer.current.stopPlaying()\n    }\n\n\n    async playPolyrythm(counterRythm, basicPulse) {\n        let accents = this.createPolyrythmAccents(counterRythm, basicPulse)\n        await this.setState({\n            beatsPerMeasure: (counterRythm * basicPulse),\n            beatUnit: (counterRythm * basicPulse),\n            beatAccentuation: accents\n        })\n        this.playLoop()\n    }\n    createPolyrythmAccents(counterRythm, basicPulse) {\n        var accents = new Map()\n        accents.set(0, 3)\n        for (let tick = 1; tick < (counterRythm * basicPulse); tick++) {\n            if ((tick % counterRythm) === 0) {\n                accents.set(tick, 2)\n            }\n            else if ((tick % basicPulse) === 0) {\n                accents.set(tick, 1)\n            }\n            else {\n                accents.set(tick, 0)\n            }\n        }\n        return accents\n    }\n\n\n    async changeAccentuation(index) {\n        let currentAccent = this.state.beatAccentuation.get(index - 1) || 0\n        let updatedAccents = new Map(this.state.beatAccentuation).set(index - 1, ((currentAccent + 1) % 4))\n        await this.setState({\n            beatAccentuation: updatedAccents\n        })\n\n        this.updatePlayingLoop()\n    }\n\n    async changeTempoStyle(style) {\n        await this.setState({ tempoStyle: style })\n        this.updateTempo()\n    }\n\n    async updateBpm(number) {\n        await this.setState({ beatUnitsPerMinute: number })\n        this.updateTempo()\n    }\n\n    async updateTimeSignature(beatsPerMeasure, beatUnit) {\n        let updatedAccents = new Map(this.state.beatAccentuation)\n        for (let index = this.state.beatsPerMeasure; index < beatsPerMeasure; index++) {\n            updatedAccents.set(parseInt(index), 1)\n        }\n        await this.setState({\n            beatsPerMeasure: beatsPerMeasure,\n            beatUnit: beatUnit,\n            beatAccentuation: updatedAccents\n        })\n        this.updatePlayingLoop()\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 20 }}> {/*This is the recommended Workaround if you want to use the spacing prop in a Grid container, see: https://material-ui.com/components/grid/ */}\n                <Grid container spacing={2} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item>\n                        <BpmInput defaultBpm={this.state.beatUnitsPerMinute} changeTempoStyle={this.changeTempoStyle.bind(this)} updateBpm={this.updateBpm.bind(this)} currentBpm={this.state.beatUnitsPerMinute} tempoStyle={this.state.tempoStyle}></BpmInput>\n                    </Grid>\n                    <Grid item >\n                        <TimeSignatureInput beatUnit={this.state.beatUnit} beatsPerMeasure={this.state.beatsPerMeasure} updateTimeSignature={this.updateTimeSignature.bind(this)}></TimeSignatureInput>\n                    </Grid>\n                    <Grid item>\n                        <Grid container justify=\"center\" spacing={2} column=\"row\">\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.playLoop.bind(this)}>Play sound</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.stopLoop.bind(this)}>Stop sound</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <PolyrythmInput playPolyrythm={this.playPolyrythm.bind(this)}></PolyrythmInput>\n                    </Grid>\n                    <Grid item>\n                        <SubdivisionInput changeSubdivision={this.changeAccentuation.bind(this)} beatAccentuation={this.state.beatAccentuation} numberOfSubdivisions={this.state.beatsPerMeasure}></SubdivisionInput>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Metronome","import MIDISounds from 'midi-sounds-react';\nimport React, { Component } from 'react';\n\nclass MidiPlayback extends Component {\n\n    startPlayLoop(beatLoop, beatsPerMinute, density) {\n        this.midiSounds.startPlayLoop(beatLoop, beatsPerMinute, density)\n    }\n\n    stopPlayLoop() {\n        this.midiSounds.stopPlayLoop()\n    }\n\n    componentDidMount() {\n        this.midiSounds.setEchoLevel(0);\n        this.midiSounds.setMasterVolume(1.0);\n    }\n\n    render() {\n        return (\n            <MIDISounds\n                ref={(ref) => this.midiSounds = ref}\n                appElementName=\"root\"\n                drums={[200, 205, 210]}>\n            </MIDISounds>\n        )\n    }\n}\n\nexport default MidiPlayback;","import { AppBar, Typography, Toolbar } from \"@material-ui/core\";\nimport React from 'react';\n\nfunction Navbar() {\n    return (<AppBar position=\"static\" color=\"primary\" >\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"initial\">\n                Metronome\n            </Typography>\n        </Toolbar>\n    </AppBar>);\n}\nexport default Navbar;","import { Grid, Link, Typography } from '@material-ui/core';\nimport React from 'react';\nimport BeatLoopPlayer from './Components/BeatLoopPlayer';\nimport Metronome from './Components/Metronome';\nimport MidiPlayback from './Components/MidiPlayback';\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n\n  let midiPlayback = React.createRef()\n  let beatPlayer = React.createRef()\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Grid item>\n          <Metronome\n            defaultSubdivisionsPerBeat=\"1\"\n            defaultBeatUnit=\"4\"\n            defaultBeatsPerMeasure=\"4\"\n            defaultBpm=\"120\"\n            defaultBeatAccentuation={new Map([[0, 3], [1, 1], [2, 1], [3, 1]])}\n            tempoStyle=\"Quarter\"\n            beatPlayer={beatPlayer}>\n          </Metronome>\n        </Grid>\n        <Grid item>\n          <BeatLoopPlayer ref={beatPlayer} midiPlayback={midiPlayback} ></BeatLoopPlayer>\n        </Grid>\n        <Grid item>\n          <MidiPlayback\n            ref={midiPlayback}>\n          </MidiPlayback>\n        </Grid>\n        <Grid item>\n          <Typography>\n            Check out the Code on&nbsp;\n              <Link href=\"https://github.com/JanKneiphof/ReactMetronome\" target=\"_blank\" rel=\"noreferrer\">Github</Link>\n          </Typography>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}