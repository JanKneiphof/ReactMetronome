{"version":3,"sources":["BpmInput.js","TimeSignatureInput.js","Metronome.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["noCapslockButtonText","textTransform","BpmInput","props","state","value","defaultBpm","number","parseInt","this","setState","updateMetronomeBpm","updateBpm","Math","floor","parseFloat","isNaN","inputEvent","target","isPositiveInteger","trim","Grid","container","spacing","alignItems","justify","direction","item","TextField","InputProps","startAdornment","InputAdornment","position","id","onChange","handleInput","bind","placeholder","margin","label","variant","autoFocus","alignContent","Button","aria-label","onClick","addBpm","style","multiplyBpmBy","Component","TimeSignatureInput","beatsPerMeasure","defaultTimeSignature","beatUnit","updateTimeSignature","padding","updateBeatsPerMeasure","updateBeatUnit","Metronome","beatUnitsPerMinute","subdivisionsPerBeat","defaultSubdivisionsPerBeat","defaultBeatUnit","defaultBeatsPerMeasure","midiSounds","setEchoLevel","setMasterVolume","playLoop","strongBeat","weakBeat","beatLoop","tick","loop","createBeatLoop","startPlayLoop","stopPlayLoop","column","stopLoop","ref","appElementName","drums","Navbar","AppBar","color","Toolbar","Typography","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d931ca7.chunk.js","sourcesContent":["import { Button, Grid, InputAdornment, TextField } from \"@material-ui/core\";\nimport React, { Component } from 'react';\n\nconst noCapslockButtonText = ({\n    textTransform: 'none'\n});\n\nclass BpmInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.defaultBpm,\n        };\n    }\n\n    addBpm(value) {\n        const number = parseInt(this.state.value, 10) + parseInt(value, 10)\n        if (number < 0) {\n            return\n        }\n        else {\n            this.setState(\n                { value: number },\n                this.updateMetronomeBpm(number)\n            )\n        }\n    }\n\n    updateMetronomeBpm(number) {\n        this.props.updateBpm(number)\n    }\n\n    multiplyBpmBy(value) {\n        const number = Math.floor(parseInt(this.state.value, 10) * parseFloat(value, 10))\n        if (number < 0) {\n            return\n        } else {\n            this.setState(\n                { value: number },\n                this.updateMetronomeBpm(number)\n            )\n        }\n    }\n\n    isPositiveInteger(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    handleInput(inputEvent) {\n        const number = inputEvent.target.value\n        if (this.isPositiveInteger(number)) {\n            this.setState(\n                { value: number.trim() },\n                this.updateMetronomeBpm(number)\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item>\n                        <TextField\n                            InputProps={{\n                                startAdornment: <InputAdornment position=\"start\">â™© = </InputAdornment>,\n                                //endAdornment: <InputAdornment position='end'>Beat Units per Minute</InputAdornment>\n                            }}\n                            id=\"username\"\n                            onChange={this.handleInput.bind(this)}\n                            value={this.state.value}\n                            placeholder=\"0\"\n                            margin=\"normal\"\n                            label=\"Enter BPM\"\n                            variant=\"outlined\"\n                            autoFocus={true} />\n                    </Grid>\n                    <Grid item>\n                        <Grid alignContent=\"center\" justify=\"center\" container spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"+10\" onClick={this.addBpm.bind(this, '+10')} variant=\"outlined\">+10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x1.5\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '1.5')} variant=\"outlined\">x1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x2\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '2')} variant=\"outlined\" >x2.0</Button>\n                            </Grid>\n                        </Grid>\n                        <Grid justify=\"center\" container alignContent=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"-10\" onClick={this.addBpm.bind(this, '-10')} variant=\"outlined\">-10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"Ã·1.5\" onClick={this.multiplyBpmBy.bind(this, '0.75')} variant=\"outlined\">Ã·1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"Ã·2\" onClick={this.multiplyBpmBy.bind(this, '0.5')} variant=\"outlined\">Ã·2</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nexport default BpmInput","import React, { Component } from \"react\";\nimport { TextField, Grid } from \"@material-ui/core\"\n\nclass TimeSignatureInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            beatsPerMeasure: this.props.defaultTimeSignature[0],\n            beatUnit: this.props.defaultTimeSignature[1]\n        };\n    }\n    isPositiveInteger(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    updateBeatsPerMeasure(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.setState({ beatsPerMeasure: number })\n            this.props.updateTimeSignature([number, this.state.beatUnit])\n        }\n    }\n    updateBeatUnit(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.setState({ beatUnit: number })\n            this.props.updateTimeSignature([this.state.beatsPerMeasure, number])\n        }\n    }\n\n    render() {\n        return (<div style={{ padding: 1 }}>\n            <Grid container spacing={1} justify=\"center\" direction=\"column\">\n                <Grid item>\n                    <TextField variant=\"standard\" value={this.state.beatsPerMeasure} onChange={this.updateBeatsPerMeasure.bind(this)} label=\"Beats per Measure\"></TextField>\n                </Grid>\n                <Grid item>\n                    <TextField variant=\"standard\" value={this.state.beatUnit} onChange={this.updateBeatUnit.bind(this)} label=\"Beat Unit\"></TextField>\n                </Grid>\n            </Grid>\n        </div>\n        )\n    };\n}\n\nexport default TimeSignatureInput","import { Button, Grid } from \"@material-ui/core\";\nimport MIDISounds from 'midi-sounds-react';\nimport React, { Component } from \"react\";\nimport BpmInput from \"./BpmInput\";\nimport TimeSignatureInput from \"./TimeSignatureInput\";\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            beatUnitsPerMinute: this.props.defaultBpm,\n            subdivisionsPerBeat: this.props.defaultSubdivisionsPerBeat,\n            beatUnit: this.props.defaultBeatUnit,\n            beatsPerMeasure: this.props.defaultBeatsPerMeasure\n        }\n    }\n\n    componentDidMount() {\n        this.midiSounds.setEchoLevel(0);\n        this.midiSounds.setMasterVolume(0.5);\n    }\n\n    async updateBpm(number) {\n        await this.setState({ beatUnitsPerMinute: number })\n        this.playLoop()\n    }\n\n    async updateTimeSignature([beatsPerMeasure, beatUnit]) {\n        await this.setState({\n            beatsPerMeasure: beatsPerMeasure,\n            beatUnit: beatUnit\n        })\n        this.playLoop()\n    }\n\n    createBeatLoop(beatsPerMeasure, subdivisionsPerBeat) {\n        const strongBeat = [[205], []];\n        const weakBeat = [[210], []];\n        const firstBeat = [[200], []];\n        var beatLoop = [];\n\n        beatLoop[0] = firstBeat;\n        for (var tick = 1; tick < (beatsPerMeasure * subdivisionsPerBeat); tick++) {\n            if (tick % subdivisionsPerBeat === 0) {\n                beatLoop[tick] = strongBeat;\n            }\n            else {\n                beatLoop[tick] = weakBeat;\n            }\n        }\n        return beatLoop;\n\n    }\n\n    playLoop() {\n        var loop = this.createBeatLoop(this.state.beatsPerMeasure, this.state.subdivisionsPerBeat)\n        this.midiSounds.startPlayLoop(loop, this.state.beatUnitsPerMinute, 1 / (this.state.beatUnit * this.state.subdivisionsPerBeat));\n    }\n    stopLoop() {\n        this.midiSounds.stopPlayLoop()\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 20 }}> {/*This is the recommended Workaround if you want to use the spacing prop in a Grid container, see: https://material-ui.com/components/grid/ */}\n                <Grid container spacing={2} justify=\"center\" direction=\"column\">\n                    <Grid item>\n                        <BpmInput defaultBpm={this.state.beatUnitsPerMinute} updateBpm={this.updateBpm.bind(this)}></BpmInput>\n                    </Grid>\n                    <Grid item >\n                        <TimeSignatureInput defaultTimeSignature={[this.state.beatsPerMeasure, this.state.beatUnit]} updateTimeSignature={this.updateTimeSignature.bind(this)}></TimeSignatureInput>\n                    </Grid>\n                    <Grid item>\n                        <Grid container justify=\"center\" spacing={2} column=\"row\">\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.playLoop.bind(this)}>Play sound</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.stopLoop.bind(this)}>Stop sound</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" drums={[200, 205, 210]}></MIDISounds>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Metronome","import { AppBar, Typography, Toolbar } from \"@material-ui/core\";\nimport React from 'react';\n\nfunction Navbar() {\n    return (<AppBar position=\"static\" color=\"primary\" >\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"initial\">\n                Metronome\n            </Typography>\n        </Toolbar>\n    </AppBar>);\n}\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Metronome from './Metronome';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Metronome defaultSubdivisionsPerBeat=\"1\" defaultBeatUnit=\"4\" defaultBeatsPerMeasure=\"4\" defaultBpm=\"120\"></Metronome>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}