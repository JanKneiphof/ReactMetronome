{"version":3,"sources":["styles/bpmInputButton.styles.js","styles/card.styles.js","Components/BpmInput.js","Components/TimeSignatureInput.js","Components/SubdivisionInput.js","Components/PolyrythmInput.js","Components/Metronome.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["noCapslockButtonText","textTransform","gridInCard","margin","captionInCard","BpmInput","value","number","parseInt","this","props","currentBpm","updateMetronomeBpm","updateBpm","Math","floor","parseFloat","isNaN","tempoStyle","startAdornment","InputAdornment","position","endAdornment","event","style","target","changeTempoStyle","inputEvent","isPositiveRealNumber","Card","variant","Typography","Grid","container","spacing","alignItems","justify","direction","item","RadioGroup","aria-label","name","onChange","bind","FormControlLabel","control","Radio","label","TextField","InputProps","createAdornment","id","handleInput","placeholder","autoFocus","Button","onClick","addBpm","multiplyBpmBy","Component","TimeSignatureInput","trim","isPositiveInteger","updateTimeSignature","beatUnit","beatsPerMeasure","updateBeatsPerMeasure","updateBeatUnit","SubdivisionInput","index","changeSubdivision","size","buttons","accentString","repeat","beatAccentuation","get","length","push","key","ButtonGroup","createButtonGroups","numberOfSubdivisions","PolyrythmInput","state","counterRythm","basicPulse","changeEvent","setState","maxIndex","options","playPolyrythm","NativeSelect","updateCounterRythm","createOptions","updateBasicPulse","Metronome","beatUnitsPerMinute","defaultBpm","subdivisionsPerBeat","defaultSubdivisionsPerBeat","defaultBeatUnit","defaultBeatsPerMeasure","isPlaying","defaultBeatAccentuation","midiSounds","setEchoLevel","setMasterVolume","playLoop","loop","createBeatLoop","startPlayLoop","accents","createPolyrythmAccents","firstBeat","weakBeat","strongBeat","muteBeat","beatLoop","tick","Map","set","stopPlayLoop","currentAccent","updatedAccents","updatePlayingLoop","padding","column","stopLoop","changeAccentuation","ref","appElementName","drums","Link","href","rel","Navbar","AppBar","color","Toolbar","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d7683f10.chunk.js","sourcesContent":["const noCapslockButtonText = ({\n    textTransform: 'none'\n});\n\nexport default noCapslockButtonText\n\n","const gridInCard = ({\n    margin: 10\n});\n\nconst captionInCard = ({\n    margin: 10\n});\n\nexport {gridInCard, captionInCard}","import { Button, Grid, InputAdornment, TextField, Card, Typography, RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\nimport React, { Component } from 'react';\nimport noCapslockButtonText from '../styles/bpmInputButton.styles'\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\n\nclass BpmInput extends Component {\n    addBpm(value) {\n        const number = parseInt(this.props.currentBpm, 10) + parseInt(value, 10)\n        if (number < 0) {\n            return\n        }\n        else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    updateMetronomeBpm(number) {\n        this.props.updateBpm(number)\n    }\n\n    multiplyBpmBy(value) {\n        const number = Math.floor(parseInt(this.props.currentBpm, 10) * parseFloat(value, 10))\n        if (number < 0) {\n            return\n        } else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    isPositiveRealNumber(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    createAdornment() {\n        if (this.props.tempoStyle === \"Quarter\") {\n            return {\n                startAdornment: <InputAdornment position=\"start\">♩ = </InputAdornment>,\n            }\n        }\n        else {\n            return {\n                endAdornment: <InputAdornment position=\"end\">BPM </InputAdornment>,\n            }\n        }\n    }\n\n    changeTempoStyle(event) {\n        let style = event.target.value\n        if (style === \"Quarter\" || style === \"BPM\")\n            this.props.changeTempoStyle(style)\n    }\n\n    handleInput(inputEvent) {\n        const number = inputEvent.target.value\n        if (this.isPositiveRealNumber(number)) {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography variant=\"caption\" style={captionInCard}>Tempo</Typography>\n                <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item style={gridInCard}>\n                        <RadioGroup aria-label=\"Tempostyle\" name=\"Tempostyle\" value={this.props.tempoStyle} onChange={this.changeTempoStyle.bind(this)}>\n                            <FormControlLabel value=\"Quarter\" control={<Radio />} label=\"Quarter Notes per Minute\" />\n                            <FormControlLabel value=\"BPM\" control={<Radio />} label=\"Beats per Minute\" />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <TextField\n                            InputProps={this.createAdornment()}\n                            id=\"username\"\n                            onChange={this.handleInput.bind(this)}\n                            value={this.props.currentBpm}\n                            placeholder=\"0\"\n                            margin=\"normal\"\n                            label=\"Enter Tempo\"\n                            variant=\"standard\"\n                            autoFocus={true} />\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Grid container alignItems=\"center\" justify=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"+10\" onClick={this.addBpm.bind(this, '+10')} variant=\"contained\">+10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x1.5\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '1.5')} variant=\"contained\">x1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x2\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '2')} variant=\"contained\" >x2.0</Button>\n                            </Grid>\n                        </Grid>\n                        <Grid container justify=\"center\" alignItems=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"-10\" onClick={this.addBpm.bind(this, '-10')} variant=\"contained\">-10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"÷1.5\" onClick={this.multiplyBpmBy.bind(this, '0.75')} variant=\"contained\">÷1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"÷2\" onClick={this.multiplyBpmBy.bind(this, '0.5')} variant=\"contained\">÷2</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}\nexport default BpmInput","import { Grid, TextField, Card, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\nclass TimeSignatureInput extends Component {\n    isPositiveInteger(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    updateBeatsPerMeasure(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.props.updateTimeSignature(number, this.props.beatUnit)\n        }\n    }\n    updateBeatUnit(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.props.updateTimeSignature(this.props.beatsPerMeasure, number)\n        }\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography style={captionInCard} variant=\"caption\">Time Signature</Typography>\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item style={gridInCard}>\n                        <TextField variant=\"standard\" value={this.props.beatsPerMeasure} onChange={this.updateBeatsPerMeasure.bind(this)} label=\"Beats per Measure\"></TextField>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <TextField variant=\"standard\" value={this.props.beatUnit} onChange={this.updateBeatUnit.bind(this)} label=\"Beat Unit\"></TextField>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    };\n}\n\nexport default TimeSignatureInput","import { Button, ButtonGroup, Card, Grid, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\n\nclass SubdivisionInput extends Component {\n\n    handleClick(index) {\n        this.props.changeSubdivision(index)\n    }\n\n    createButtonGroups(size) {\n        let buttons = []\n\n        for (let index = 1; index <= size; index++) {\n            let accentString = \"█\".repeat(this.props.beatAccentuation.get(index - 1))\n            if (accentString.length === 0) {\n                accentString = \"mute\"\n            }\n            buttons.push(\n                <Grid key={index} item>\n                    <Grid container alignItems=\"center\" direction=\"column\">\n                        <Grid item>\n                            <Typography>{accentString}</Typography>\n                        </Grid>\n                        <Grid item>\n                            <ButtonGroup\n                                key={\"upTo\" + index}\n                                size=\"small\"\n                            >\n                                <Button\n                                    size=\"small\"\n                                    onClick={this.props.changeSubdivision.bind(this, index)}\n                                    variant=\"outlined\"\n                                    value={index}\n                                    aria-label={\"Subdivision \" + index}\n                                >\n                                    {index}\n                                </Button>\n                            </ButtonGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )\n\n        }\n        return (<Grid container style={gridInCard} direction=\"row\">{buttons}</Grid>)\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography variant=\"caption\" style={captionInCard}>Beat Accents</Typography>\n                {this.createButtonGroups(this.props.numberOfSubdivisions)}\n            </Card>\n        )\n    }\n}\n\nexport default SubdivisionInput","import { Card, Grid, Typography, NativeSelect, Button } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport { captionInCard, gridInCard } from '../styles/card.styles';\n\nclass PolyrythmInput extends Component {\n\n    constructor(props) {\n        super(props) \n        this.state = {\n            counterRythm: 1,\n            basicPulse: 1\n        }\n    }\n\n    async updateCounterRythm(changeEvent) {\n        if (isNaN(changeEvent.target.value) || parseInt(changeEvent) <= 0) {\n            return\n        }\n        else {\n            await this.setState({counterRythm: changeEvent.target.value})\n        }\n    }\n    async updateBasicPulse(changeEvent) {\n        if (isNaN(changeEvent.target.value) || parseInt(changeEvent) <= 0) {\n            return\n        }\n        else {\n            await this.setState({basicPulse: changeEvent.target.value})\n        }\n    }\n\n    createOptions(maxIndex) {\n        var options = []\n        for (let index = 1; index < maxIndex+1; index++) {\n            options.push(<option key={index} value={index}>{index}</option>);\n            \n        }\n        return (options)\n    }\n\n\n    playPolyrythm() {\n        this.props.playPolyrythm(this.state.counterRythm, this.state.basicPulse)\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography style={captionInCard} variant=\"caption\">Polyrythm</Typography>\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item style={gridInCard}>\n                        <NativeSelect onChange={(event) => this.updateCounterRythm(event)}>\n                            {this.createOptions(100)}\n                        </NativeSelect>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Typography> against </Typography>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <NativeSelect onChange={(event) => this.updateBasicPulse(event)}>\n                            {this.createOptions(100)}\n                        </NativeSelect>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Button variant=\"contained\" onClick={() => this.playPolyrythm()}>Create Polyrythm</Button>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}\n\nexport default PolyrythmInput","import { Button, Grid, Link, Typography } from \"@material-ui/core\";\nimport MIDISounds from 'midi-sounds-react';\nimport React, { Component } from \"react\";\nimport BpmInput from \"./BpmInput\";\nimport TimeSignatureInput from \"./TimeSignatureInput\";\nimport SubdivisionInput from \"./SubdivisionInput\";\nimport PolyrythmInput from './PolyrythmInput'\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            beatUnitsPerMinute: this.props.defaultBpm,\n            subdivisionsPerBeat: this.props.defaultSubdivisionsPerBeat,\n            beatUnit: this.props.defaultBeatUnit,\n            beatsPerMeasure: this.props.defaultBeatsPerMeasure,\n            isPlaying: false,\n            beatAccentuation: this.props.defaultBeatAccentuation,\n            tempoStyle: this.props.tempoStyle\n        }\n    }\n\n    componentDidMount() {\n        this.midiSounds.setEchoLevel(0);\n        this.midiSounds.setMasterVolume(1.0);\n    }\n\n    updatePlayingLoop() {\n        if (this.state.isPlaying === true) {\n            this.playLoop()\n        }\n    }\n\n    playLoop() {\n        this.setState({ isPlaying: true })\n        var loop = this.createBeatLoop(this.state.beatsPerMeasure, this.state.subdivisionsPerBeat, this.state.beatAccentuation)\n        if (this.state.tempoStyle === \"Quarter\") {\n            this.midiSounds.startPlayLoop(loop, this.state.beatUnitsPerMinute, 1 / (this.state.beatUnit * this.state.subdivisionsPerBeat));\n        }\n        else {\n            this.midiSounds.startPlayLoop(loop, this.state.beatUnitsPerMinute, 1 / (4 * this.state.subdivisionsPerBeat));\n        }\n    }\n\n    async playPolyrythm(counterRythm, basicPulse) {\n        let accents = this.createPolyrythmAccents(counterRythm, basicPulse)\n        await this.setState({\n            beatsPerMeasure: (counterRythm * basicPulse),\n            beatUnit: (counterRythm * basicPulse),\n            beatAccentuation: accents\n        })\n        this.playLoop()\n    }\n\n    createBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation) {\n        const firstBeat = [[200], []];\n        const weakBeat = [[210], []];\n        const strongBeat = [[205], []];\n        const muteBeat = [[], []]\n        var beatLoop = [];\n\n        for (let tick = 0; tick < (beatsPerMeasure * subdivisionsPerBeat); tick++) {\n            let accent = beatAccentuation.get(tick)\n            switch (accent) {\n                case 1: beatLoop[tick] = weakBeat;\n                    break;\n                case 2: beatLoop[tick] = strongBeat;\n                    break;\n                case 3: beatLoop[tick] = firstBeat;\n                    break;\n                case 0: beatLoop[tick] = muteBeat;\n                    break;\n                default: beatLoop[tick] = muteBeat;\n            }\n        }\n        return beatLoop;\n    }\n\n    createPolyrythmAccents(counterRythm, basicPulse) {\n        var accents = new Map()\n        accents.set(0, 3)\n        for (let tick = 1; tick < (counterRythm * basicPulse); tick++) {\n            if ((tick % counterRythm) === 0) {\n                accents.set(tick, 2)\n            }\n            else if ((tick % basicPulse) === 0) {\n                accents.set(tick, 1)\n            }\n            else {\n                accents.set(tick, 0)\n            }\n        }\n        return accents\n    }\n\n    stopLoop() {\n        this.setState({ isPlaying: false })\n        this.midiSounds.stopPlayLoop()\n    }\n\n    async changeAccentuation(index) {\n        let currentAccent = this.state.beatAccentuation.get(index - 1) || 0\n        let updatedAccents = new Map(this.state.beatAccentuation).set(index - 1, ((currentAccent + 1) % 4))\n        await this.setState({\n            beatAccentuation: updatedAccents\n        })\n\n        this.updatePlayingLoop()\n    }\n\n    async changeTempoStyle(style) {\n        await this.setState({ tempoStyle: style })\n        this.updatePlayingLoop()\n    }\n\n    async updateBpm(number) {\n        await this.setState({ beatUnitsPerMinute: number })\n        this.updatePlayingLoop()\n    }\n\n    async updateTimeSignature(beatsPerMeasure, beatUnit) {\n        let updatedAccents = new Map(this.state.beatAccentuation)\n        for (let index = this.state.beatsPerMeasure; index < beatsPerMeasure; index++) {\n            updatedAccents.set(parseInt(index), 1)\n        }\n        await this.setState({\n            beatsPerMeasure: beatsPerMeasure,\n            beatUnit: beatUnit,\n            beatAccentuation: updatedAccents\n        })\n        this.updatePlayingLoop()\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 20 }}> {/*This is the recommended Workaround if you want to use the spacing prop in a Grid container, see: https://material-ui.com/components/grid/ */}\n                <Grid container spacing={2} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item>\n                        <BpmInput defaultBpm={this.state.beatUnitsPerMinute} changeTempoStyle={this.changeTempoStyle.bind(this)} updateBpm={this.updateBpm.bind(this)} currentBpm={this.state.beatUnitsPerMinute} tempoStyle={this.state.tempoStyle}></BpmInput>\n                    </Grid>\n                    <Grid item >\n                        <TimeSignatureInput beatUnit={this.state.beatUnit} beatsPerMeasure={this.state.beatsPerMeasure} updateTimeSignature={this.updateTimeSignature.bind(this)}></TimeSignatureInput>\n                    </Grid>\n                    <Grid item>\n                        <Grid container justify=\"center\" spacing={2} column=\"row\">\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.playLoop.bind(this)}>Play sound</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.stopLoop.bind(this)}>Stop sound</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <PolyrythmInput playPolyrythm={this.playPolyrythm.bind(this)}></PolyrythmInput>\n                    </Grid>\n                    <Grid item>\n                        <SubdivisionInput changeSubdivision={this.changeAccentuation.bind(this)} beatAccentuation={this.state.beatAccentuation} numberOfSubdivisions={this.state.beatsPerMeasure}></SubdivisionInput>\n                    </Grid>\n                    <Grid item>\n                        <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" drums={[200, 205, 210]}></MIDISounds>\n                    </Grid>\n                    <Grid item>\n                        <Typography>\n                            Check out the Code on&nbsp;\n                            <Link href=\"https://github.com/JanKneiphof/ReactMetronome\" target=\"_blank\" rel=\"noreferrer\">Github</Link>\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Metronome","import { AppBar, Typography, Toolbar } from \"@material-ui/core\";\nimport React from 'react';\n\nfunction Navbar() {\n    return (<AppBar position=\"static\" color=\"primary\" >\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"initial\">\n                Metronome\n            </Typography>\n        </Toolbar>\n    </AppBar>);\n}\nexport default Navbar;","import React from 'react';\nimport Metronome from './Components/Metronome';\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Metronome\n        defaultSubdivisionsPerBeat=\"1\"\n        defaultBeatUnit=\"4\"\n        defaultBeatsPerMeasure=\"4\"\n        defaultBpm=\"120\"\n        defaultBeatAccentuation={new Map([[0,3],[1,1],[2,1],[3,1]])}\n        tempoStyle=\"Quarter\">\n        </Metronome>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}