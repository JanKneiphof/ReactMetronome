{"version":3,"sources":["styles/bpmInputButton.styles.js","Components/BpmInput.js","Components/TimeSignatureInput.js","Components/SubdivisionInput.js","Components/Metronome.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["noCapslockButtonText","textTransform","BpmInput","value","number","parseInt","this","props","currentBpm","updateMetronomeBpm","updateBpm","Math","floor","parseFloat","isNaN","tempoStyle","startAdornment","InputAdornment","position","endAdornment","event","style","target","changeTempoStyle","inputEvent","isPositiveRealNumber","Grid","container","item","Card","variant","Typography","margin","spacing","alignItems","justify","direction","RadioGroup","aria-label","name","onChange","bind","FormControlLabel","control","Radio","label","TextField","InputProps","createAdornment","id","handleInput","placeholder","autoFocus","Button","onClick","addBpm","multiplyBpmBy","Component","TimeSignatureInput","state","beatsPerMeasure","defaultTimeSignature","beatUnit","trim","isPositiveInteger","setState","updateTimeSignature","padding","updateBeatsPerMeasure","updateBeatUnit","SubdivisionInput","index","changeSubdivision","size","buttons","accentString","repeat","beatAccentuation","get","length","push","key","ButtonGroup","createButtonGroups","numberOfSubdivisions","Metronome","beatUnitsPerMinute","defaultBpm","subdivisionsPerBeat","defaultSubdivisionsPerBeat","defaultBeatUnit","defaultBeatsPerMeasure","isPlaying","defaultBeatAccentuation","midiSounds","setEchoLevel","setMasterVolume","playLoop","updatePlayingLoop","updatedAccents","Map","set","firstBeat","weakBeat","strongBeat","muteBeat","beatLoop","tick","currentAccent","loop","createBeatLoop","startPlayLoop","stopPlayLoop","column","stopLoop","changeAccentuation","ref","appElementName","drums","Navbar","AppBar","color","Toolbar","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7acd483.chunk.js","sourcesContent":["const noCapslockButtonText = ({\n    textTransform: 'none'\n});\n\nexport default noCapslockButtonText\n\n","import { Button, Grid, InputAdornment, TextField, Card, Typography, RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\nimport React, { Component } from 'react';\nimport noCapslockButtonText from '../styles/bpmInputButton.styles'\n\n\nclass BpmInput extends Component {\n    addBpm(value) {\n        const number = parseInt(this.props.currentBpm, 10) + parseInt(value, 10)\n        if (number < 0) {\n            return\n        }\n        else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    updateMetronomeBpm(number) {\n        this.props.updateBpm(number)\n    }\n\n    multiplyBpmBy(value) {\n        const number = Math.floor(parseInt(this.props.currentBpm, 10) * parseFloat(value, 10))\n        if (number < 0) {\n            return\n        } else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    isPositiveRealNumber(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    createAdornment() {\n        if (this.props.tempoStyle === \"Quarter\") {\n            return {\n                startAdornment: <InputAdornment position=\"start\">♩ = </InputAdornment>,\n            }\n        }\n        else {\n            return {\n                endAdornment: <InputAdornment position=\"end\">BPM </InputAdornment>,\n            }\n        }\n    }\n\n    changeTempoStyle(event) {\n        let style = event.target.value\n        if (style === \"Quarter\" || style === \"BPM\")\n            this.props.changeTempoStyle(style)\n    }\n\n    handleInput(inputEvent) {\n        const number = inputEvent.target.value\n        if (this.isPositiveRealNumber(number)) {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    render() {\n        return (\n            <Grid container>\n                <Grid item>\n                    <Card variant=\"outlined\">\n                        <Typography variant=\"caption\" style={{ margin: 10 }}>Tempo</Typography>\n                        <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"row\">\n                            <Grid item style={{ margin: 10 }}>\n                                <RadioGroup aria-label=\"Tempostyle\" name=\"Tempostyle\" value={this.props.tempoStyle} onChange={this.changeTempoStyle.bind(this)}>\n                                    <FormControlLabel value=\"Quarter\" control={<Radio />} label=\"Quarter Notes per Minute\" />\n                                    <FormControlLabel value=\"BPM\" control={<Radio />} label=\"Beats per Minute\" />\n                                </RadioGroup>\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    InputProps={this.createAdornment()}\n                                    style={{ margin: 10 }}\n                                    id=\"username\"\n                                    onChange={this.handleInput.bind(this)}\n                                    value={this.props.currentBpm}\n                                    placeholder=\"0\"\n                                    margin=\"normal\"\n                                    label=\"Enter Tempo\"\n                                    variant=\"standard\"\n                                    autoFocus={true} />\n                            </Grid>\n                            <Grid item style={{ margin: 10 }}>\n                                <Grid container alignItems=\"center\" justify=\"center\" spacing={1} direction=\"row\">\n                                    <Grid item>\n                                        <Button aria-label=\"+10\" onClick={this.addBpm.bind(this, '+10')} variant=\"contained\">+10</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"x1.5\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '1.5')} variant=\"contained\">x1.5</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"x2\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '2')} variant=\"contained\" >x2.0</Button>\n                                    </Grid>\n                                </Grid>\n                                <Grid container justify=\"center\" alignItems=\"center\" spacing={1} direction=\"row\">\n                                    <Grid item>\n                                        <Button aria-label=\"-10\" onClick={this.addBpm.bind(this, '-10')} variant=\"contained\">-10</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"÷1.5\" onClick={this.multiplyBpmBy.bind(this, '0.75')} variant=\"contained\">÷1.5</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"÷2\" onClick={this.multiplyBpmBy.bind(this, '0.5')} variant=\"contained\">÷2</Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n        )\n    }\n}\nexport default BpmInput","import { Grid, TextField, Card, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\n\nclass TimeSignatureInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            beatsPerMeasure: this.props.defaultTimeSignature[0],\n            beatUnit: this.props.defaultTimeSignature[1]\n        };\n    }\n    isPositiveInteger(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    updateBeatsPerMeasure(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.setState({ beatsPerMeasure: number })\n            this.props.updateTimeSignature([number, this.state.beatUnit])\n        }\n    }\n    updateBeatUnit(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.setState({ beatUnit: number })\n            this.props.updateTimeSignature([this.state.beatsPerMeasure, number])\n        }\n    }\n\n    render() {\n        return (<Grid container style={{ padding: 1 }}>\n            <Card variant=\"outlined\">\n                <Grid item>\n                    <Typography style={{ margin: 10 }} variant=\"caption\">Time Signature</Typography>\n                </Grid>\n                <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item style={{ margin: 10 }}>\n                        <TextField variant=\"standard\" value={this.state.beatsPerMeasure} onChange={this.updateBeatsPerMeasure.bind(this)} label=\"Beats per Measure\"></TextField>\n                    </Grid>\n                    <Grid item style={{ margin: 10 }}>\n                        <TextField variant=\"standard\" value={this.state.beatUnit} onChange={this.updateBeatUnit.bind(this)} label=\"Beat Unit\"></TextField>\n                    </Grid>\n                </Grid>\n            </Card>\n        </Grid>\n        )\n    };\n}\n\nexport default TimeSignatureInput","import { Button, ButtonGroup, Card, Grid, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\n\n\nclass SubdivisionInput extends Component {\n\n    handleClick(index) {\n        this.props.changeSubdivision(index)\n    }\n\n    createButtonGroups(size) {\n        let buttons = []\n\n        for (let index = 1; index <= size; index++) {\n            let accentString = \"█\".repeat(this.props.beatAccentuation.get(index - 1))\n            if (accentString.length === 0) {\n                accentString = \"mute\"\n            }\n            buttons.push(\n                <Grid key={index} item>\n                    <Grid container alignItems=\"center\" direction=\"column\">\n                        <Grid item>\n                            <Typography>{accentString}</Typography>\n                        </Grid>\n                        <Grid item>\n                            <ButtonGroup\n                                key={\"upTo\" + index}\n                                size=\"small\"\n                            >\n                                <Button\n                                    size=\"small\"\n                                    onClick={this.props.changeSubdivision.bind(this, index)}\n                                    variant=\"outlined\"\n                                    value={index}\n                                    aria-label={\"Subdivision \" + index}\n                                >\n                                    {index}\n                                </Button>\n                            </ButtonGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )\n\n        }\n        return (<Grid container  style={{margin: 10}} direction=\"row\">{buttons}</Grid>)\n    }\n\n    render() {\n        return (<Grid container>\n            <Grid item>\n                <Card variant=\"outlined\">\n                    <Typography variant=\"caption\" style={{margin: 10}}>Beat Accents</Typography>\n                    {this.createButtonGroups(this.props.numberOfSubdivisions)}\n                </Card>\n            </Grid>\n        </Grid>)\n    }\n}\n\nexport default SubdivisionInput","import { Button, Grid } from \"@material-ui/core\";\nimport MIDISounds from 'midi-sounds-react';\nimport React, { Component } from \"react\";\nimport BpmInput from \"./BpmInput\";\nimport TimeSignatureInput from \"./TimeSignatureInput\";\nimport SubdivisionInput from \"./SubdivisionInput\";\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            beatUnitsPerMinute: this.props.defaultBpm,\n            subdivisionsPerBeat: this.props.defaultSubdivisionsPerBeat,\n            beatUnit: this.props.defaultBeatUnit,\n            beatsPerMeasure: this.props.defaultBeatsPerMeasure,\n            isPlaying: false,\n            beatAccentuation: this.props.defaultBeatAccentuation,\n            tempoStyle: this.props.tempoStyle\n        }\n    }\n\n    componentDidMount() {\n        this.midiSounds.setEchoLevel(0);\n        this.midiSounds.setMasterVolume(1.0);\n    }\n\n    updatePlayingLoop() {\n        if (this.state.isPlaying === true) {\n            this.playLoop()\n        }\n    }\n\n    async changeTempoStyle(style) {\n        await this.setState({ tempoStyle: style })\n        this.updatePlayingLoop()\n    }\n\n    async updateBpm(number) {\n        await this.setState({ beatUnitsPerMinute: number })\n        this.updatePlayingLoop()\n    }\n\n    async updateTimeSignature([beatsPerMeasure, beatUnit]) {\n        let updatedAccents = new Map(this.state.beatAccentuation)\n        for (let index = this.state.beatsPerMeasure; index < beatsPerMeasure; index++) {\n            updatedAccents.set(parseInt(index), 1)\n        }\n        await this.setState({\n            beatsPerMeasure: beatsPerMeasure,\n            beatUnit: beatUnit,\n            beatAccentuation: updatedAccents\n        })\n        this.updatePlayingLoop()\n    }\n\n    createBeatLoop(beatsPerMeasure, subdivisionsPerBeat) {\n        const firstBeat = [[200], []];\n        const weakBeat = [[210], []];\n        const strongBeat = [[205], []];\n        const muteBeat = [[], []]\n        var beatLoop = [];\n\n        for (let tick = 0; tick < (beatsPerMeasure * subdivisionsPerBeat); tick++) {\n            let accent = this.state.beatAccentuation.get(tick)\n            switch (accent) {\n                case 1: beatLoop[tick] = weakBeat;\n                    break;\n                case 2: beatLoop[tick] = strongBeat;\n                    break;\n                case 3: beatLoop[tick] = firstBeat;\n                    break;\n                case 0: beatLoop[tick] = muteBeat;\n                    break;\n                default: beatLoop[tick] = muteBeat;\n            }\n        }\n        return beatLoop;\n\n    }\n\n    async changeAccentuation(index) {\n        let currentAccent = this.state.beatAccentuation.get(index - 1) || 0\n        let updatedAccents = new Map(this.state.beatAccentuation).set(index - 1, ((currentAccent + 1) % 4))\n        await this.setState({\n            beatAccentuation: updatedAccents\n        })\n\n        this.updatePlayingLoop()\n    }\n\n    playLoop() {\n        this.setState({ isPlaying: true })\n        var loop = this.createBeatLoop(this.state.beatsPerMeasure, this.state.subdivisionsPerBeat)\n        if (this.state.tempoStyle === \"Quarter\") {\n            this.midiSounds.startPlayLoop(loop, this.state.beatUnitsPerMinute, 1 / (this.state.beatUnit * this.state.subdivisionsPerBeat));\n        }\n        else {\n            this.midiSounds.startPlayLoop(loop, this.state.beatUnitsPerMinute, 1 / (4 * this.state.subdivisionsPerBeat));\n        }\n    }\n    stopLoop() {\n        this.setState({ isPlaying: false })\n        this.midiSounds.stopPlayLoop()\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 20 }}> {/*This is the recommended Workaround if you want to use the spacing prop in a Grid container, see: https://material-ui.com/components/grid/ */}\n                <Grid container spacing={2} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item>\n                        <BpmInput defaultBpm={this.state.beatUnitsPerMinute} changeTempoStyle={this.changeTempoStyle.bind(this)} updateBpm={this.updateBpm.bind(this)} currentBpm={this.state.beatUnitsPerMinute} tempoStyle={this.state.tempoStyle}></BpmInput>\n                    </Grid>\n                    <Grid item >\n                        <TimeSignatureInput defaultTimeSignature={[this.state.beatsPerMeasure, this.state.beatUnit]} updateTimeSignature={this.updateTimeSignature.bind(this)}></TimeSignatureInput>\n                    </Grid>\n                    <Grid item>\n                        <Grid container justify=\"center\" spacing={2} column=\"row\">\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.playLoop.bind(this)}>Play sound</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.stopLoop.bind(this)}>Stop sound</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <SubdivisionInput changeSubdivision={this.changeAccentuation.bind(this)} beatAccentuation={this.state.beatAccentuation} numberOfSubdivisions={this.state.beatsPerMeasure}></SubdivisionInput>\n                    </Grid>\n                    <Grid item>\n                        <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" drums={[200, 205, 210]}></MIDISounds>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Metronome","import { AppBar, Typography, Toolbar } from \"@material-ui/core\";\nimport React from 'react';\n\nfunction Navbar() {\n    return (<AppBar position=\"static\" color=\"primary\" >\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"initial\">\n                Metronome\n            </Typography>\n        </Toolbar>\n    </AppBar>);\n}\nexport default Navbar;","import React from 'react';\nimport Metronome from './Components/Metronome';\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Metronome\n        defaultSubdivisionsPerBeat=\"1\"\n        defaultBeatUnit=\"4\"\n        defaultBeatsPerMeasure=\"4\"\n        defaultBpm=\"120\"\n        defaultBeatAccentuation={new Map([[0,3],[1,1],[2,1],[3,1]])}\n        tempoStyle=\"Quarter\">\n        </Metronome>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}