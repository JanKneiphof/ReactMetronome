{"version":3,"sources":["styles/bpmInputButton.styles.js","styles/card.styles.js","Components/BpmInput.js","Components/PolyrythmInput.js","Components/SubdivisionInput.js","Components/TimeSignatureInput.js","Components/Metronome.js","Components/BeatLoopPlayer.js","Components/MidiPlayback.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["noCapslockButtonText","textTransform","gridInCard","margin","captionInCard","BpmInput","value","number","parseInt","this","props","currentBpm","updateMetronomeBpm","updateBpm","Math","floor","parseFloat","isNaN","tempoStyle","startAdornment","InputAdornment","position","endAdornment","event","style","target","changeTempoStyle","inputEvent","isPositiveRealNumber","Card","variant","Typography","Grid","container","spacing","alignItems","justify","direction","item","RadioGroup","aria-label","label","name","onChange","bind","FormControlLabel","control","Radio","TextField","InputProps","createAdornment","id","handleInput","placeholder","autoFocus","Button","onClick","addBpm","multiplyBpmBy","Component","PolyrythmInput","state","counterRythm","basicPulse","changeEvent","setState","maxIndex","options","index","push","key","playPolyrythm","FormControl","InputLabel","htmlFor","NativeSelect","updateCounterRythm","createOptions","updateBasicPulse","SubdivisionInput","changeSubdivision","size","buttons","intensity","beatAccentuation","get","accentString","repeat","length","ButtonGroup","createButtonGroups","numberOfSubdivisions","TimeSignatureInput","trim","updateTimeSignature","beatUnit","beatsPerMeasure","updateBeatsPerMeasure","updateBeatUnit","Metronome","beatUnitsPerMinute","defaultBpm","subdivisionsPerBeat","defaultSubdivisionsPerBeat","defaultBeatUnit","defaultBeatsPerMeasure","isPlaying","defaultBeatAccentuation","playLoop","updateTempo","updateBeatLoop","stopPlaying","accents","createPolyrythmAccents","Map","set","tick","currentAccent","updatedAccents","updatePlayingLoop","padding","column","stopLoop","changeAccentuation","BeatLoopPlayer","loop","createBeatLoop","midiPlayback","current","startPlayLoop","firstBeat","weakBeat","strongBeat","muteBeat","beatLoop","stopPlayLoop","MidiPlayback","beatsPerMinute","density","midiSounds","setEchoLevel","setMasterVolume","ref","appElementName","drums","Navbar","AppBar","color","Toolbar","App","React","createRef","className","Link","href","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f3a2e7d5.chunk.js","sourcesContent":["const noCapslockButtonText = ({\n    textTransform: 'none'\n});\n\nexport default noCapslockButtonText\n\n","const gridInCard = ({\n    margin: 10\n});\n\nconst captionInCard = ({\n    margin: 10\n});\n\nexport {gridInCard, captionInCard}","import { Button, Grid, InputAdornment, TextField, Card, Typography, RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\nimport React, { Component } from 'react';\nimport noCapslockButtonText from '../styles/bpmInputButton.styles'\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\n\nclass BpmInput extends Component {\n    addBpm(value) {\n        const number = parseInt(this.props.currentBpm, 10) + parseInt(value, 10)\n        if (number < 0) {\n            return\n        }\n        else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    updateMetronomeBpm(number) {\n        this.props.updateBpm(number)\n    }\n\n    multiplyBpmBy(value) {\n        const number = Math.floor(parseInt(this.props.currentBpm, 10) * parseFloat(value, 10))\n        if (number < 0) {\n            return\n        } else {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    isPositiveRealNumber(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    createAdornment() {\n        if (this.props.tempoStyle === \"Quarter\") {\n            return {\n                startAdornment: <InputAdornment position=\"start\">♩ = </InputAdornment>,\n            }\n        }\n        else {\n            return {\n                endAdornment: <InputAdornment position=\"end\">BPM </InputAdornment>,\n            }\n        }\n    }\n\n    changeTempoStyle(event) {\n        let style = event.target.value\n        if (style === \"Quarter\" || style === \"BPM\")\n            this.props.changeTempoStyle(style)\n    }\n\n    handleInput(inputEvent) {\n        const number = inputEvent.target.value\n        if (this.isPositiveRealNumber(number)) {\n            this.updateMetronomeBpm(number)\n        }\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography variant=\"caption\" style={captionInCard}>Tempo</Typography>\n                <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item style={gridInCard}>\n                        <RadioGroup aria-label=\"Tempostyle\" label=\"Tempostyle\" name=\"Tempostyle\" value={this.props.tempoStyle} onChange={this.changeTempoStyle.bind(this)}>\n                            <FormControlLabel value=\"Quarter\" control={<Radio />} label=\"Quarter Notes per Minute\" />\n                            <FormControlLabel value=\"BPM\" control={<Radio />} label=\"Beats per Minute\" />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <TextField\n                            InputProps={this.createAdornment()}\n                            id=\"username\"\n                            onChange={this.handleInput.bind(this)}\n                            value={this.props.currentBpm}\n                            placeholder=\"0\"\n                            margin=\"normal\"\n                            label=\"Enter Tempo\"\n                            variant=\"standard\"\n                            autoFocus={true} />\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Grid container alignItems=\"center\" justify=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"+10\" onClick={this.addBpm.bind(this, '+10')} variant=\"contained\">+10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x1.5\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '1.5')} variant=\"contained\">x1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"x2\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '2')} variant=\"contained\" >x2.0</Button>\n                            </Grid>\n                        </Grid>\n                        <Grid container justify=\"center\" alignItems=\"center\" spacing={1} direction=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"-10\" onClick={this.addBpm.bind(this, '-10')} variant=\"contained\">-10</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"÷1.5\" onClick={this.multiplyBpmBy.bind(this, '0.75')} variant=\"contained\">÷1.5</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"÷2\" onClick={this.multiplyBpmBy.bind(this, '0.5')} variant=\"contained\">÷2</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}\nexport default BpmInput","import { Button, Card, FormControl, Grid, InputLabel, NativeSelect, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport { captionInCard, gridInCard } from '../styles/card.styles';\n\nclass PolyrythmInput extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            counterRythm: 1,\n            basicPulse: 1\n        }\n    }\n\n    async updateCounterRythm(changeEvent) {\n        if (isNaN(changeEvent.target.value) || parseInt(changeEvent) <= 0) {\n            return\n        }\n        else {\n            await this.setState({ counterRythm: changeEvent.target.value })\n        }\n    }\n    async updateBasicPulse(changeEvent) {\n        if (isNaN(changeEvent.target.value) || parseInt(changeEvent) <= 0) {\n            return\n        }\n        else {\n            await this.setState({ basicPulse: changeEvent.target.value })\n        }\n    }\n\n    createOptions(maxIndex) {\n        var options = []\n        for (let index = 1; index < maxIndex + 1; index++) {\n            options.push(<option key={index} value={index}>{index}</option>);\n\n        }\n        return (options)\n    }\n\n\n    playPolyrythm() {\n        this.props.playPolyrythm(this.state.counterRythm, this.state.basicPulse)\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography style={captionInCard} variant=\"caption\">Polyrythm</Typography>\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"row\">\n                    <Grid item style={gridInCard}>\n                        <FormControl>\n                            <InputLabel htmlFor=\"Counterrythm-Input\">\n                                Counterrythm\n                            </InputLabel>\n                            <NativeSelect id=\"Counterrythm-Input\" onChange={(event) => this.updateCounterRythm(event)}>\n                                {this.createOptions(25)}\n                            </NativeSelect>\n                        </FormControl>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Typography> against </Typography>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <FormControl>\n                            <InputLabel htmlFor=\"Basic-Pulse-Input\">\n                                Basic&nbsp;Pulse\n                            </InputLabel>\n                            <NativeSelect id=\"Basic-Pulse-Input\" onChange={(event) => this.updateBasicPulse(event)}>\n                                {this.createOptions(25)}\n                            </NativeSelect>\n                        </FormControl>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <Button variant=\"contained\" aria-label=\"Play-Polyrythm\" onClick={() => this.playPolyrythm()}>Play Polyrythm</Button>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}\n\nexport default PolyrythmInput","import { Button, ButtonGroup, Card, Grid, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport {captionInCard, gridInCard} from '../styles/card.styles'\n\n\nclass SubdivisionInput extends Component {\n\n    handleClick(index) {\n        this.props.changeSubdivision(index)\n    }\n\n    createButtonGroups(size) {\n        let buttons = []\n\n        for (let index = 1; index <= size; index++) {\n            let intensity = this.props.beatAccentuation.get(index - 1)\n            let accentString = \"█\".repeat(intensity)\n            if (accentString.length === 0) {\n                accentString = \"mute\"\n            }\n            buttons.push(\n                <Grid key={index} item>\n                    <Grid container alignItems=\"center\" direction=\"column\">\n                        <Grid item>\n                            <Typography>{accentString}</Typography>\n                        </Grid>\n                        <Grid item>\n                            <ButtonGroup\n                                key={\"upTo\" + index}\n                                size=\"small\"\n                            >\n                                <Button\n                                    size=\"small\"\n                                    onClick={this.props.changeSubdivision.bind(this, index)}\n                                    variant=\"outlined\"\n                                    value={intensity}\n                                    aria-label={\"Subdivision \" + index}\n                                >\n                                    {index}\n                                </Button>\n                            </ButtonGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )\n\n        }\n        return (<Grid container style={gridInCard} direction=\"row\">{buttons}</Grid>)\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography variant=\"caption\" style={captionInCard}>Beat Accents</Typography>\n                {this.createButtonGroups(this.props.numberOfSubdivisions)}\n            </Card>\n        )\n    }\n}\n\nexport default SubdivisionInput","import { Grid, TextField, Card, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { captionInCard, gridInCard } from '../styles/card.styles'\n\nclass TimeSignatureInput extends Component {\n    isPositiveRealNumber(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    updateBeatsPerMeasure(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveRealNumber(number)) {\n            this.props.updateTimeSignature(number, this.props.beatUnit)\n        }\n    }\n    updateBeatUnit(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveRealNumber(number)) {\n            this.props.updateTimeSignature(this.props.beatsPerMeasure, number)\n        }\n    }\n\n    render() {\n        return (\n            <Card variant=\"outlined\">\n                <Typography style={captionInCard} variant=\"caption\">Time Signature</Typography>\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item style={gridInCard}>\n                        <TextField variant=\"standard\" id=\"BeatsPerMeasureInput\" value={this.props.beatsPerMeasure} onChange={this.updateBeatsPerMeasure.bind(this)} label=\"Beats per Measure\"></TextField>\n                    </Grid>\n                    <Grid item style={gridInCard}>\n                        <TextField variant=\"standard\" id=\"BeatUnitInput\" value={this.props.beatUnit} onChange={this.updateBeatUnit.bind(this)} label=\"Beat Unit\"></TextField>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    };\n}\n\nexport default TimeSignatureInput","import { Button, Grid } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport BpmInput from \"./BpmInput\";\nimport PolyrythmInput from './PolyrythmInput';\nimport SubdivisionInput from \"./SubdivisionInput\";\nimport TimeSignatureInput from \"./TimeSignatureInput\";\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            beatUnitsPerMinute: this.props.defaultBpm,\n            subdivisionsPerBeat: this.props.defaultSubdivisionsPerBeat,\n            beatUnit: this.props.defaultBeatUnit,\n            beatsPerMeasure: this.props.defaultBeatsPerMeasure,\n            isPlaying: false,\n            beatAccentuation: this.props.defaultBeatAccentuation,\n            tempoStyle: this.props.tempoStyle\n        }\n    }\n\n    updatePlayingLoop() {\n        if (this.state.isPlaying === true) {\n            this.playLoop()\n        }\n    }\n    updateTempo() {\n        if (this.state.isPlaying === true) {\n            this.props.updateTempo(\n                this.state.beatUnitsPerMinute,\n                this.state.tempoStyle,\n                this.state.beatUnit,\n                this.state.subdivisionsPerBeat\n            )\n        }\n    }\n\n    playLoop() {\n        this.setState({ isPlaying: true })\n        this.props.updateBeatLoop(\n            this.state.beatsPerMeasure,\n            this.state.subdivisionsPerBeat,\n            this.state.beatAccentuation,\n            this.state.tempoStyle,\n            this.state.beatUnitsPerMinute,\n            this.state.beatUnit\n        )\n    }\n    stopLoop() {\n        this.setState({ isPlaying: false })\n        this.props.stopPlaying()\n    }\n\n\n    async playPolyrythm(counterRythm, basicPulse) {\n        let accents = this.createPolyrythmAccents(counterRythm, basicPulse)\n        await this.setState({\n            beatsPerMeasure: (counterRythm * basicPulse),\n            beatUnit: (counterRythm * basicPulse),\n            beatAccentuation: accents\n        })\n        this.playLoop()\n    }\n    createPolyrythmAccents(counterRythm, basicPulse) {\n        var accents = new Map()\n        accents.set(0, 3)\n        for (let tick = 1; tick < (counterRythm * basicPulse); tick++) {\n            if ((tick % counterRythm) === 0) {\n                accents.set(tick, 2)\n            }\n            else if ((tick % basicPulse) === 0) {\n                accents.set(tick, 1)\n            }\n            else {\n                accents.set(tick, 0)\n            }\n        }\n        return accents\n    }\n\n\n    async changeAccentuation(index) {\n        let currentAccent = this.state.beatAccentuation.get(index - 1) || 0\n        let updatedAccents = new Map(this.state.beatAccentuation).set(index - 1, ((currentAccent + 1) % 4))\n        await this.setState({\n            beatAccentuation: updatedAccents\n        })\n\n        this.updatePlayingLoop()\n    }\n\n    async changeTempoStyle(style) {\n        await this.setState({ tempoStyle: style })\n        this.updateTempo()\n    }\n\n    async updateBpm(number) {\n        await this.setState({ beatUnitsPerMinute: number })\n        this.updateTempo()\n    }\n\n    async updateTimeSignature(beatsPerMeasure, beatUnit) {\n        let updatedAccents = new Map(this.state.beatAccentuation)\n        for (let index = this.state.beatsPerMeasure; index < beatsPerMeasure; index++) {\n            updatedAccents.set(parseInt(index), 1)\n        }\n        await this.setState({\n            beatsPerMeasure: beatsPerMeasure,\n            beatUnit: beatUnit,\n            beatAccentuation: updatedAccents\n        })\n        this.updatePlayingLoop()\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 20 }}> {/*This is the recommended Workaround if you want to use the spacing prop in a Grid container, see: https://material-ui.com/components/grid/ */}\n                <Grid container spacing={2} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item>\n                        <BpmInput defaultBpm={this.state.beatUnitsPerMinute} changeTempoStyle={this.changeTempoStyle.bind(this)} updateBpm={this.updateBpm.bind(this)} currentBpm={this.state.beatUnitsPerMinute} tempoStyle={this.state.tempoStyle}></BpmInput>\n                    </Grid>\n                    <Grid item >\n                        <TimeSignatureInput beatUnit={this.state.beatUnit} beatsPerMeasure={this.state.beatsPerMeasure} updateTimeSignature={this.updateTimeSignature.bind(this)}></TimeSignatureInput>\n                    </Grid>\n                    <Grid item>\n                        <Grid container justify=\"center\" spacing={2} column=\"row\">\n                            <Grid item>\n                                <Button aria-label=\"Play Sound\" variant=\"contained\" onClick={this.playLoop.bind(this)}>Play sound</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button aria-label=\"Stop Sound\" variant=\"contained\" onClick={this.stopLoop.bind(this)}>Stop sound</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <PolyrythmInput playPolyrythm={this.playPolyrythm.bind(this)}></PolyrythmInput>\n                    </Grid>\n                    <Grid item>\n                        <SubdivisionInput changeSubdivision={this.changeAccentuation.bind(this)} beatAccentuation={this.state.beatAccentuation} numberOfSubdivisions={this.state.beatsPerMeasure}></SubdivisionInput>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Metronome","import React, { Component } from 'react';\nimport Metronome from './Metronome';\n\nclass BeatLoopPlayer extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loop: null\n        }\n    }\n\n    updateBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation, tempoStyle, beatUnitsPerMinute, beatUnit) {\n        var loop = this.createBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation)\n        this.setState({ loop: loop })\n        if (tempoStyle === \"Quarter\") {\n            this.props.midiPlayback.current.startPlayLoop(loop, beatUnitsPerMinute, 1 / (beatUnit * subdivisionsPerBeat));\n        }\n        else {\n            this.props.midiPlayback.current.startPlayLoop(loop, beatUnitsPerMinute, 1 / (4 * subdivisionsPerBeat));\n        }\n    }\n\n    updateTempo(beatUnitsPerMinute, tempoStyle, beatUnit, subdivisionsPerBeat) {\n        if (tempoStyle === \"Quarter\") {\n            this.props.midiPlayback.current.startPlayLoop(this.state.loop, beatUnitsPerMinute, 1 / (beatUnit * subdivisionsPerBeat));\n        }\n        else {\n            this.props.midiPlayback.current.startPlayLoop(this.state.loop, beatUnitsPerMinute, 1 / (4 * subdivisionsPerBeat));\n        }\n    }\n\n    createBeatLoop(beatsPerMeasure, subdivisionsPerBeat, beatAccentuation) {\n        if (!beatsPerMeasure) {\n            return [[[], []]]\n        }\n\n        const firstBeat = [[200], []];\n        const weakBeat = [[210], []];\n        const strongBeat = [[205], []];\n        const muteBeat = [[], []]\n        var beatLoop = [];\n\n        for (let tick = 0; tick < (beatsPerMeasure * subdivisionsPerBeat); tick++) {\n            let accent = beatAccentuation.get(tick)\n            switch (accent) {\n                case 1: beatLoop[tick] = weakBeat;\n                    break;\n                case 2: beatLoop[tick] = strongBeat;\n                    break;\n                case 3: beatLoop[tick] = firstBeat;\n                    break;\n                case 0: beatLoop[tick] = muteBeat;\n                    break;\n                default: beatLoop[tick] = muteBeat;\n            }\n        }\n        return beatLoop;\n    }\n\n    stopPlaying() {\n        this.props.midiPlayback.current.stopPlayLoop()\n    }\n\n    render() {\n        return (\n            <Metronome\n                defaultSubdivisionsPerBeat=\"1\"\n                defaultBeatUnit=\"4\"\n                defaultBeatsPerMeasure=\"4\"\n                defaultBpm=\"120\"\n                defaultBeatAccentuation={new Map([[0, 3], [1, 1], [2, 1], [3, 1]])}\n                tempoStyle=\"Quarter\"\n                updateBeatLoop={this.updateBeatLoop.bind(this)}\n                updateTempo={this.updateTempo.bind(this)}\n                stopPlaying={this.stopPlaying.bind(this)}>\n            </Metronome>\n        )\n    }\n}\n\nexport default BeatLoopPlayer","import MIDISounds from 'midi-sounds-react';\nimport React, { Component } from 'react';\n\nclass MidiPlayback extends Component {\n\n    startPlayLoop(beatLoop, beatsPerMinute, density) {\n        this.midiSounds.startPlayLoop(beatLoop, beatsPerMinute, density)\n    }\n\n    stopPlayLoop() {\n        this.midiSounds.stopPlayLoop()\n    }\n\n    componentDidMount() {\n        this.midiSounds.setEchoLevel(0);\n        this.midiSounds.setMasterVolume(1.0);\n    }\n\n    render() {\n        return (\n            <MIDISounds\n                ref={(ref) => this.midiSounds = ref}\n                appElementName=\"root\"\n                drums={[200, 205, 210]}>\n            </MIDISounds>\n        )\n    }\n}\n\nexport default MidiPlayback;","import { AppBar, Typography, Toolbar } from \"@material-ui/core\";\nimport React from 'react';\n\nfunction Navbar() {\n    return (<AppBar position=\"static\" color=\"primary\" >\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"initial\">\n                Metronome\n            </Typography>\n        </Toolbar>\n    </AppBar>);\n}\nexport default Navbar;","import { Grid, Link, Typography } from '@material-ui/core';\nimport React from 'react';\nimport BeatLoopPlayer from './Components/BeatLoopPlayer';\nimport MidiPlayback from './Components/MidiPlayback';\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n\n  let midiPlayback = React.createRef()\n\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Grid item>\n          <BeatLoopPlayer midiPlayback={midiPlayback} ></BeatLoopPlayer>\n        </Grid>\n        <Grid item>\n          <MidiPlayback\n            ref={midiPlayback}>\n          </MidiPlayback>\n        </Grid>\n        <Grid item>\n          <Typography>\n            Check out the Code on&nbsp;\n              <Link href=\"https://github.com/JanKneiphof/ReactMetronome\" target=\"_blank\" rel=\"noreferrer\">Github</Link>\n          </Typography>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}