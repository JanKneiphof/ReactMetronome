{"version":3,"sources":["styles/bpmInputButton.styles.js","Components/BpmInput.js","Components/TimeSignatureInput.js","Components/SubdivisionInput.js","Components/Metronome.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["noCapslockButtonText","textTransform","BpmInput","props","state","value","defaultBpm","number","parseInt","this","setState","updateMetronomeBpm","updateBpm","Math","floor","parseFloat","isNaN","inputEvent","target","isPositiveInteger","trim","Grid","container","item","Card","variant","Typography","style","margin","spacing","alignItems","justify","direction","TextField","InputProps","startAdornment","InputAdornment","position","id","onChange","handleInput","bind","placeholder","label","autoFocus","Button","aria-label","onClick","addBpm","multiplyBpmBy","Component","TimeSignatureInput","beatsPerMeasure","defaultTimeSignature","beatUnit","updateTimeSignature","padding","updateBeatsPerMeasure","updateBeatUnit","SubdivisionInput","index","changeSubdivision","size","buttons","accentString","repeat","beatAccentuation","get","length","push","key","ButtonGroup","createButtonGroups","numberOfSubdivisions","Metronome","beatUnitsPerMinute","subdivisionsPerBeat","defaultSubdivisionsPerBeat","defaultBeatUnit","defaultBeatsPerMeasure","isPlaying","defaultBeatAccentuation","midiSounds","setEchoLevel","setMasterVolume","playLoop","updatePlayingLoop","updatedAccents","Map","set","firstBeat","weakBeat","strongBeat","muteBeat","beatLoop","tick","currentAccent","loop","createBeatLoop","startPlayLoop","stopPlayLoop","column","stopLoop","changeAccentuation","ref","appElementName","drums","Navbar","AppBar","color","Toolbar","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e0188bf.chunk.js","sourcesContent":["const noCapslockButtonText = ({\n    textTransform: 'none'\n});\n\nexport default noCapslockButtonText\n\n","import { Button, Grid, InputAdornment, TextField, Card, Typography } from \"@material-ui/core\";\nimport React, { Component } from 'react';\nimport noCapslockButtonText from '../styles/bpmInputButton.styles'\n\n\nclass BpmInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.defaultBpm,\n        };\n    }\n\n    addBpm(value) {\n        const number = parseInt(this.state.value, 10) + parseInt(value, 10)\n        if (number < 0) {\n            return\n        }\n        else {\n            this.setState(\n                { value: number },\n                this.updateMetronomeBpm(number)\n            )\n        }\n    }\n\n    updateMetronomeBpm(number) {\n        this.props.updateBpm(number)\n    }\n\n    multiplyBpmBy(value) {\n        const number = Math.floor(parseInt(this.state.value, 10) * parseFloat(value, 10))\n        if (number < 0) {\n            return\n        } else {\n            this.setState(\n                { value: number },\n                this.updateMetronomeBpm(number)\n            )\n        }\n    }\n\n    isPositiveInteger(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    handleInput(inputEvent) {\n        const number = inputEvent.target.value\n        if (this.isPositiveInteger(number)) {\n            this.setState(\n                { value: number.trim() },\n                this.updateMetronomeBpm(number)\n            )\n        }\n    }\n\n    render() {\n        return (\n            <Grid container>\n                <Grid item>\n                    <Card variant=\"outlined\">\n                        <Typography variant=\"caption\" style={{ margin: 10 }}>Tempo</Typography>\n                        <Grid container spacing={1} alignItems=\"center\" justify=\"center\" direction=\"row\">\n                            <Grid item>\n                                <TextField\n                                    InputProps={{\n                                        startAdornment: <InputAdornment position=\"start\">♩ = </InputAdornment>,\n                                    }}\n                                    style={{ margin: 10 }}\n                                    id=\"username\"\n                                    onChange={this.handleInput.bind(this)}\n                                    value={this.state.value}\n                                    placeholder=\"0\"\n                                    margin=\"normal\"\n                                    label=\"Enter BPM\"\n                                    variant=\"standard\"\n                                    autoFocus={true} />\n                            </Grid>\n                            <Grid item style={{margin: 10}}>\n                                <Grid container alignItems=\"center\" justify=\"center\" spacing={1} direction=\"row\">\n                                    <Grid item>\n                                        <Button aria-label=\"+10\" onClick={this.addBpm.bind(this, '+10')} variant=\"contained\">+10</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"x1.5\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '1.5')} variant=\"contained\">x1.5</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"x2\" style={noCapslockButtonText} onClick={this.multiplyBpmBy.bind(this, '2')} variant=\"contained\" >x2.0</Button>\n                                    </Grid>\n                                </Grid>\n                                <Grid container justify=\"center\" alignItems=\"center\" spacing={1} direction=\"row\">\n                                    <Grid item>\n                                        <Button aria-label=\"-10\" onClick={this.addBpm.bind(this, '-10')} variant=\"contained\">-10</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"÷1.5\" onClick={this.multiplyBpmBy.bind(this, '0.75')} variant=\"contained\">÷1.5</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button aria-label=\"÷2\" onClick={this.multiplyBpmBy.bind(this, '0.5')} variant=\"contained\">÷2</Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n        )\n    }\n}\nexport default BpmInput","import { Grid, TextField, Card, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\n\nclass TimeSignatureInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            beatsPerMeasure: this.props.defaultTimeSignature[0],\n            beatUnit: this.props.defaultTimeSignature[1]\n        };\n    }\n    isPositiveInteger(number) {\n        if (isNaN(number) || number < 0) {\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n    updateBeatsPerMeasure(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.setState({ beatsPerMeasure: number })\n            this.props.updateTimeSignature([number, this.state.beatUnit])\n        }\n    }\n    updateBeatUnit(inputEvent) {\n        let number = inputEvent.target.value.trim()\n        if (this.isPositiveInteger(number)) {\n            this.setState({ beatUnit: number })\n            this.props.updateTimeSignature([this.state.beatsPerMeasure, number])\n        }\n    }\n\n    render() {\n        return (<Grid container style={{ padding: 1 }}>\n            <Card variant=\"outlined\">\n                <Grid item>\n                    <Typography style={{ margin: 10 }} variant=\"caption\">Time Signature</Typography>\n                </Grid>\n                <Grid spacing={1} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item style={{ margin: 10 }}>\n                        <TextField variant=\"standard\" value={this.state.beatsPerMeasure} onChange={this.updateBeatsPerMeasure.bind(this)} label=\"Beats per Measure\"></TextField>\n                    </Grid>\n                    <Grid item style={{ margin: 10 }}>\n                        <TextField variant=\"standard\" value={this.state.beatUnit} onChange={this.updateBeatUnit.bind(this)} label=\"Beat Unit\"></TextField>\n                    </Grid>\n                </Grid>\n            </Card>\n        </Grid>\n        )\n    };\n}\n\nexport default TimeSignatureInput","import { Button, ButtonGroup, Card, Grid, Typography } from '@material-ui/core';\nimport React, { Component } from 'react';\n\n\nclass SubdivisionInput extends Component {\n\n    handleClick(index) {\n        this.props.changeSubdivision(index)\n    }\n\n    createButtonGroups(size) {\n        let buttons = []\n\n        for (let index = 1; index <= size; index++) {\n            let accentString = \"█\".repeat(this.props.beatAccentuation.get(index - 1))\n            if (accentString.length === 0) {\n                accentString = \"mute\"\n            }\n            buttons.push(\n                <Grid key={index} item>\n                    <Grid container alignItems=\"center\" direction=\"column\">\n                        <Grid item>\n                            <Typography>{accentString}</Typography>\n                        </Grid>\n                        <Grid item>\n                            <ButtonGroup\n                                key={\"upTo\" + index}\n                                size=\"small\"\n                            >\n                                <Button\n                                    size=\"small\"\n                                    onClick={this.props.changeSubdivision.bind(this, index)}\n                                    variant=\"outlined\"\n                                    value={index}\n                                    aria-label={\"Subdivision \" + index}\n                                >\n                                    {index}\n                                </Button>\n                            </ButtonGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )\n\n        }\n        return (<Grid container  style={{margin: 10}} direction=\"row\">{buttons}</Grid>)\n    }\n\n    render() {\n        return (<Grid container>\n            <Grid item>\n                <Card variant=\"outlined\">\n                    <Typography variant=\"caption\" style={{margin: 10}}>Beat Accents</Typography>\n                    {this.createButtonGroups(this.props.numberOfSubdivisions)}\n                </Card>\n            </Grid>\n        </Grid>)\n    }\n}\n\nexport default SubdivisionInput","import { Button, Grid } from \"@material-ui/core\";\nimport MIDISounds from 'midi-sounds-react';\nimport React, { Component } from \"react\";\nimport BpmInput from \"./BpmInput\";\nimport TimeSignatureInput from \"./TimeSignatureInput\";\nimport SubdivisionInput from \"./SubdivisionInput\";\n\nclass Metronome extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            beatUnitsPerMinute: this.props.defaultBpm,\n            subdivisionsPerBeat: this.props.defaultSubdivisionsPerBeat,\n            beatUnit: this.props.defaultBeatUnit,\n            beatsPerMeasure: this.props.defaultBeatsPerMeasure,\n            isPlaying: false,\n            beatAccentuation: this.props.defaultBeatAccentuation\n        }\n    }\n\n    componentDidMount() {\n        this.midiSounds.setEchoLevel(0);\n        this.midiSounds.setMasterVolume(0.5);\n    }\n\n    updatePlayingLoop() {\n        if (this.state.isPlaying === true) {\n            this.playLoop()\n        }\n    }\n\n    async updateBpm(number) {\n        await this.setState({ beatUnitsPerMinute: number })\n        this.updatePlayingLoop()\n    }\n\n    async updateTimeSignature([beatsPerMeasure, beatUnit]) {\n        let updatedAccents = new Map(this.state.beatAccentuation)\n        for (let index = this.state.beatsPerMeasure; index < beatsPerMeasure; index++) {\n            updatedAccents.set(parseInt(index), 1)\n        }\n        await this.setState({\n            beatsPerMeasure: beatsPerMeasure,\n            beatUnit: beatUnit,\n            beatAccentuation: updatedAccents\n        })\n        this.updatePlayingLoop()\n    }\n\n    createBeatLoop(beatsPerMeasure, subdivisionsPerBeat) {\n        const firstBeat = [[200], []];\n        const weakBeat = [[210], []];\n        const strongBeat = [[205], []];\n        const muteBeat = [[], []]\n        var beatLoop = [];\n\n        for (let tick = 0; tick < (beatsPerMeasure * subdivisionsPerBeat); tick++) {\n            let accent = this.state.beatAccentuation.get(tick)\n            switch (accent) {\n                case 1: beatLoop[tick] = weakBeat;\n                    break;\n                case 2: beatLoop[tick] = strongBeat;\n                    break;\n                case 3: beatLoop[tick] = firstBeat;\n                    break;\n                case 0: beatLoop[tick] = muteBeat;\n                    break;\n                default: beatLoop[tick] = muteBeat;\n            }\n        }\n        return beatLoop;\n\n    }\n\n    async changeAccentuation(index) {\n        let currentAccent = this.state.beatAccentuation.get(index - 1) || 0\n        let updatedAccents = new Map(this.state.beatAccentuation).set(index - 1, ((currentAccent + 1) % 4))\n        await this.setState({\n            beatAccentuation: updatedAccents\n        })\n\n        this.updatePlayingLoop()\n    }\n\n    playLoop() {\n        this.setState({ isPlaying: true })\n        var loop = this.createBeatLoop(this.state.beatsPerMeasure, this.state.subdivisionsPerBeat)\n        this.midiSounds.startPlayLoop(loop, this.state.beatUnitsPerMinute, 1 / (this.state.beatUnit * this.state.subdivisionsPerBeat));\n    }\n    stopLoop() {\n        this.setState({ isPlaying: false })\n        this.midiSounds.stopPlayLoop()\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 20 }}> {/*This is the recommended Workaround if you want to use the spacing prop in a Grid container, see: https://material-ui.com/components/grid/ */}\n                <Grid container spacing={2} alignItems=\"center\" justify=\"center\" direction=\"column\">\n                    <Grid item>\n                        <BpmInput defaultBpm={this.state.beatUnitsPerMinute} updateBpm={this.updateBpm.bind(this)}></BpmInput>\n                    </Grid>\n                    <Grid item >\n                        <TimeSignatureInput defaultTimeSignature={[this.state.beatsPerMeasure, this.state.beatUnit]} updateTimeSignature={this.updateTimeSignature.bind(this)}></TimeSignatureInput>\n                    </Grid>\n                    <Grid item>\n                        <Grid container justify=\"center\" spacing={2} column=\"row\">\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.playLoop.bind(this)}>Play sound</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" onClick={this.stopLoop.bind(this)}>Stop sound</Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <SubdivisionInput changeSubdivision={this.changeAccentuation.bind(this)} beatAccentuation={this.state.beatAccentuation} numberOfSubdivisions={this.state.beatsPerMeasure}></SubdivisionInput>\n                    </Grid>\n                    <Grid item>\n                        <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" drums={[200, 205, 210]}></MIDISounds>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Metronome","import { AppBar, Typography, Toolbar } from \"@material-ui/core\";\nimport React from 'react';\n\nfunction Navbar() {\n    return (<AppBar position=\"static\" color=\"primary\" >\n        <Toolbar>\n            <Typography variant=\"h6\" color=\"initial\">\n                Metronome\n            </Typography>\n        </Toolbar>\n    </AppBar>);\n}\nexport default Navbar;","import React from 'react';\nimport Metronome from './Components/Metronome';\nimport Navbar from './Components/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Metronome\n        defaultSubdivisionsPerBeat=\"1\"\n        defaultBeatUnit=\"4\"\n        defaultBeatsPerMeasure=\"4\"\n        defaultBpm=\"120\"\n        defaultBeatAccentuation={new Map([[0,3],[1,1],[2,1],[3,1]])}></Metronome>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}